/*
  Note: 
  this template's comments expect the user to know how to mod for C++ 
  The Powder Toy and as such most of the explanations are done as analogs to 
  C++ modding. That being said, let's get to the templates!
*/

// in src/elements/yourelement.c:

#include <element.h>

// Like TPT++ update functions, except functions aren't nested under sim, 
// or whatnot.
int update_BCOL(UPDATE_FUNC_ARGS) {
  int r, rx, ry, trade, temp;
  if (parts[i].life<=0) {
    create_part(i, x, y, PT_FIRE);
    return 1;
  } else if (parts[i].life < 100) {
    parts[i].life--;
    create_part(-1, x+rand()%3-1, y+rand()%3-1, PT_FIRE);
  }

  for (rx=-2; rx<3; rx++) {
    for (ry=-2; ry<3; ry++) {
      if (x+rx>=0 && y+ry>0 && x+rx<XRES && y+ry<YRES && (rx || ry))
      {
        r = pmap[y+ry][x+rx];
        if (!r)
          continue;
        if (((r&0xFF)==PT_FIRE || (r&0xFF)==PT_PLSM) && 1>(rand()%500))
        {
          if (parts[i].life>100) {
            parts[i].life = 99;
          }
        }
        if ((r&0xFF)==PT_LAVA && 1>(rand()%500))
        {
          if (parts[r>>8].ctype == PT_IRON) {
            parts[r>>8].ctype = PT_METL;
            kill_part(i);
            return 1;
          }
        }
      }
    }
  }
}

// Exactly the same as TPT++ graphics functions.
int graphics_BCOL(GRAPHICS_FUNC_ARGS) {}

// in src/elementdata.c:
// ...

part_type ptypes[PT_NUM] = 
{

  // MAKE SURE THAT THE ARRAY ELEMENT ORDERING STAYS EXACTLY THE SAME
  // also make sure that the array index matches your your element index
  // (easy way using https://github.com/simtr/The-Powder-Toy/commit/e27047947d5
  // 5881d25c1b884e72afdc399ce62ad#diff-2d29443bd2ff38b570931446b6c21877 : 
  // subtract 30 from the last index to get its type
  // { ... },
  
  {
    "BCLN", // Name
    PIXPACK(0xFFD040), // Colour
    0.0f, // Advection
    0.00f * CFDS, // Airdrag
    0.97f, // Airloss
    0.50f, // Loss
    0.0f, // Collision
    0.0f, // Gravity
    0.00f, // Diffusion
    0.000f * CFDS, // Hotair
    0, // Falldown
    0, // Flammable
    0, // Explosive
    0, // Meltable
    12, // Hardness
    1, // MenuVisible
    1, // Enabled
    100, // Weight
    SC_SPECIAL, // Section
    R_TEMP+0.0f +273.15f, // Heat
    251, // HeatConduct
    "Breakable Clone.", // Description
    ST_NONE, // State
    TYPE_SOLID | PROP_LIFE_DEC | PROP_LIFE_KILL_DEC, // Properties
    &update_BCLN, // Update function pointer
    NULL // Graphics function pointer
   }
}

// then, a while later...
// the transition table! :D

part_transition ptransitions[PT_NUM] = 
{
  // Note: make sure that the array here is placed at the exact index 
  // that your element type is placed at, too!
  // so if your element type is 179, you have to make sure that this
  // little sub-array is at index 179 in the array. Indices start at 0.

  // IPL/IPH/ITL/ITH and NT mean the same thing as in C++ transition properties.

  /* BCOL */
  {
    IPL, NT, // LowPressure & LowPressureTransition
    IPH, NT, // HighPressure & HighPressureTransition
    ITL, NT, // LowTemperature & LowTemperatureTransition
    ITH, NT  // HighTemperature & HighTemperatureTransition
  }
}

// then, a while later...
// the latent heat table!

unsigned int platent[PT_NUM] =
{
  // this array seems mostly unused except for water types.
  // something to do with enthalpy. please read the source.

  /* BCOL */ 0
}

// in includes/powder.h:
// near other #define PT_...'s:
#define PT_BCOL 73

// near other int update_...'s:
int update_BCOL(UPDATE_FUNC_ARGS);

// IF YOU MADE A GRAPHICS FUNCTION then near other int graphics_...'s:
int graphics_BCOL(GRAPHICS_FUNC_ARGS);











